@*
    Ideally, this would be an internal (and probably abstract) class. So temporarily
    this is in an "internal" namespace and should become actually internal in the future.
*@
@namespace Microsoft.AspNetCore.Components.Internal
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService
@inject IAuthorizationPolicyProvider AuthorizationPolicyProvider

@if (currentAuthenticationState == null)
{
    @Authorizing
}
else if (isAuthorized)
{
    @((Authorized ?? ChildContent)?.Invoke(currentAuthenticationState))
}
else
{
    @(NotAuthorized?.Invoke(currentAuthenticationState))
}

@functions {
    private AuthenticationState currentAuthenticationState;
    private bool isAuthorized;

    [CascadingParameter] private Task<AuthenticationState> AuthenticationState { get; set; }

    /// <summary>
    /// The content that will be displayed if the user is authorized.
    /// </summary>
    [Parameter] public RenderFragment<AuthenticationState> ChildContent { get; private set; }

    /// <summary>
    /// The content that will be displayed if the user is not authorized.
    /// </summary>
    [Parameter] public RenderFragment<AuthenticationState> NotAuthorized { get; private set; }

    /// <summary>
    /// The content that will be displayed if the user is authorized.
    /// If you specify a value for this parameter, do not also specify a value for <see cref="ChildContent"/>.
    /// </summary>
    [Parameter] public RenderFragment<AuthenticationState> Authorized { get; private set; }

    /// <summary>
    /// The content that will be displayed while asynchronous authorization is in progress.
    /// </summary>
    [Parameter] public RenderFragment Authorizing { get; private set; }

    /// <summary>
    /// The resource to which access is being controlled.
    /// </summary>
    [Parameter] public object Resource { get; private set; }

    protected override async Task OnParametersSetAsync()
    {
        // We allow 'ChildContent' for convenience in basic cases, and 'Authorized' for symmetry
        // with 'NotAuthorized' in other cases. Besides naming, they are equivalent. To avoid
        // confusion, explicitly prevent the case where both are supplied.
        if (ChildContent != null && Authorized != null)
        {
            throw new InvalidOperationException($"When using {nameof(AuthorizeView)}, do not specify both '{nameof(Authorized)}' and '{nameof(ChildContent)}'.");
        }

        // First render in pending state
        // If the task has already completed, this render will be skipped
        currentAuthenticationState = null;

        // Then render in completed state
        // Importantly, we *don't* call StateHasChanged between the following async steps,
        // otherwise we'd display an incorrect UI state while waiting for IsAuthorizedAsync
        currentAuthenticationState = await AuthenticationState;
        isAuthorized = await IsAuthorizedAsync(currentAuthenticationState.User);
    }

    // TODO: Make abstract instead
    protected virtual IAuthorizeData[] AuthorizeData
    {
        get => throw new NotImplementedException($"{nameof(AuthorizeData)} must be overridden and supplied by a derived class.");
    }

    private async Task<bool> IsAuthorizedAsync(ClaimsPrincipal user)
    {
        var policy = await AuthorizationPolicy.CombineAsync(
            AuthorizationPolicyProvider, AuthorizeData);
        var result = await AuthorizationService.AuthorizeAsync(user, Resource, policy);
        return result.Succeeded;
    }
}
